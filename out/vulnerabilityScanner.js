"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkVulnerabilities = checkVulnerabilities;
const axios_1 = __importDefault(require("axios"));
async function checkVulnerabilities(dependencies) {
    const vulnerabilities = [];
    for (const dep of dependencies) {
        if (dep.version === 'N/A') {
            console.warn(`Skipping ${dep.groupId}:${dep.artifactId} due to missing version.`);
            continue; // Skip dependencies with missing versions
        }
        console.log(`Checking vulnerabilities for ${dep.groupId}:${dep.artifactId}:${dep.version}`);
        try {
            const response = await axios_1.default.post('https://api.osv.dev/v1/query', {
                package: {
                    ecosystem: 'Maven',
                    name: `${dep.groupId}:${dep.artifactId}`,
                },
                version: dep.version,
            });
            console.log(`API response for ${dep.groupId}:${dep.artifactId}:${dep.version}`, response.data);
            if (response.data.vulns) {
                for (const vuln of response.data.vulns) {
                    const severity = vuln.database_specific?.severity || 'Unknown';
                    const url = `https://osv.dev/${vuln.id}`; // 拼接URL
                    vulnerabilities.push({
                        id: vuln.id,
                        severity: severity,
                        dependencyName: `${dep.groupId}:${dep.artifactId}`,
                        version: dep.version,
                        url: url // 添加URL字段
                    });
                }
            }
        }
        catch (error) {
            console.error(`Error checking vulnerabilities for ${dep.groupId}:${dep.artifactId}:${dep.version}`, error);
        }
    }
    console.log('Vulnerabilities:', vulnerabilities);
    return vulnerabilities;
}
/*import axios from 'axios';

interface Dependency {
  groupId: string;
  artifactId: string;
  version: string;
}

interface Vulnerability {
  id: string;
  severity: string;
}

export async function checkVulnerabilities(dependencies: Dependency[]): Promise<Vulnerability[]> {
  const vulnerabilities: Vulnerability[] = [];

  for (const dep of dependencies) {
    if (dep.version === 'N/A') {
      console.warn(`Skipping ${dep.groupId}:${dep.artifactId} due to missing version.`);
      continue; // Skip dependencies with missing versions
    }

    try {
      const response = await axios.post('https://api.osv.dev/v1/query', {
        package: {
          ecosystem: 'Maven',
          name: `${dep.groupId}:${dep.artifactId}`,
        },
        version: dep.version,
      });

      if (response.data.vulns) {
        for (const vuln of response.data.vulns) {
          // 提取 `database_specific.severity` 信息
          const severity = vuln.database_specific?.severity || 'Unknown';
          vulnerabilities.push({
            id: vuln.id,
            severity: severity,
          });
        }
      }
    } catch (error) {
      console.error(`Error checking vulnerabilities for ${dep.groupId}:${dep.artifactId}:${dep.version}`, error);
    }
  }

  return vulnerabilities;
}*/
/*import axios from 'axios';

interface Dependency {
  groupId: string;
  artifactId: string;
  version: string;
}

interface Vulnerability {
  id: string;
  severity: string;
}

export async function checkVulnerabilities(dependencies: Dependency[]): Promise<Vulnerability[]> {
  const vulnerabilities: Vulnerability[] = [];

  for (const dep of dependencies) {
    if (dep.version === 'N/A') {
      console.warn(`Skipping ${dep.groupId}:${dep.artifactId} due to missing version.`);
      continue; // Skip dependencies with missing versions
    }

    try {
      const response = await axios.post('https://api.osv.dev/v1/query', {
        package: {
          ecosystem: 'Maven',
          name: `${dep.groupId}:${dep.artifactId}`,
        },
        version: dep.version,
      });

      if (response.data.vulns) {
        for (const vuln of response.data.vulns) {
          vulnerabilities.push({
            id: vuln.id,
            severity: vuln.severity,
          });
        }
      }
    } catch (error) {
      console.error(`Error checking vulnerabilities for ${dep.groupId}:${dep.artifactId}:${dep.version}`, error);
    }
  }

  return vulnerabilities;
}*/
/*import axios from 'axios';

interface Dependency {
  groupId: string;
  artifactId: string;
  version: string;
}

interface Vulnerability {
  id: string;
  severity: string;
}

export async function checkVulnerabilities(dependencies: Dependency[]): Promise<Vulnerability[]> {
  const vulnerabilities: Vulnerability[] = [];

  for (const dep of dependencies) {
    if (dep.version === 'N/A') {
      console.warn(`Skipping ${dep.groupId}:${dep.artifactId} due to missing version.`);
      continue; // Skip dependencies with missing versions
    }

    try {
      const response = await axios.post('https://api.osv.dev/v1/query', {
        package: {
          ecosystem: 'Maven',
          name: `${dep.groupId}:${dep.artifactId}`,
        },
        version: dep.version,
      });

      // Debugging output to see the full response from the API
      console.log(`Response for ${dep.groupId}:${dep.artifactId}:${dep.version}:`, response.data);

      if (response.data.vulns) {
        for (const vuln of response.data.vulns) {
          vulnerabilities.push({
            id: vuln.id,
            severity: vuln.severity,
          });
        }
      } else {
        console.log(`No vulnerabilities found for ${dep.groupId}:${dep.artifactId}:${dep.version}`);
      }
    } catch (error) {
      console.error(`Error checking vulnerabilities for ${dep.groupId}:${dep.artifactId}:${dep.version}`, error);
    }
  }

  return vulnerabilities;
}
*/ 
//# sourceMappingURL=vulnerabilityScanner.js.map